#!/usr/bin/python3
# -*- coding: utf-8 -*-
"""

@author: pearlman (Aaron B. Pearlman; aaron.b.pearlman@caltech.edu)
Version 1: 2021.12.17

"""

import numpy as np
import glob
import os
import copy
import sys
from subprocess import call, check_call, check_output, Popen

import h5py
import filterbank

import click



""" Read the filterbank file into memory. Store the data in a dynamically
    accessible h5py file, stored in a binary .hdf5 file. """
def readFilterbankHeader(inputFilename):

    fb = filterbank.FilterbankFile(inputFilename)

    inputHeader = copy.deepcopy(fb.header)
    inputNbits = fb.nbits

    totalChans = fb.nchans
    nchans = np.arange(0, fb.nchans-1, 1) # Top of the band is index 0.

    freqs = fb.frequencies

    return inputHeader



""" Read a PRESTO single pulse candidate list. """
def read_sp_list(sp_fn):

    readFile = open(sp_fn, "r")

    # Read in the header from the data file.
    headerString = readFile.readline().strip()

    # Set the delimiter.
    delimiter = " "

    # Read the single pulse list generated by PRESTO.
    dataList = readFile.read().splitlines()

    # Remove empty lines from the list.
    dataList = list(filter(None, dataList))

    numPoints = len(dataList)

    cand_dm = []
    cand_snr = []
    cand_time = []
    cand_sample = []
    cand_boxcarbinwidth = []

    for listIndex in np.arange(0, numPoints, 1):
        line = (" ".join(dataList[listIndex].split())).split(delimiter)

        cand_dm.append(float(line[0]))
        cand_snr.append(float(line[1]))
        cand_time.append(float(line[2]))
        cand_sample.append(float(line[3]))
        cand_boxcarbinwidth.append(float(line[4]))

    readFile.close()
    
    return cand_dm, cand_snr, cand_time, cand_sample, cand_boxcarbinwidth



""" Read merged single pulse candidate list. """
def read_merged_sp_list(sp_fn):

    readFile = open(sp_fn, "r")

    # Read in the header from the data file.
    headerString = readFile.readline().strip()

    # Set the delimiter.
    delimiter = "; "

    # Read the single pulse list generated by PRESTO.
    dataList = readFile.read().splitlines()

    # Remove empty lines from the list.
    dataList = list(filter(None, dataList))

    numPoints = len(dataList)

    cand_dm = []
    cand_snr = []
    cand_time = []
    cand_sample = []
    cand_boxcarbinwidth = []
    cand_pol = []

    for listIndex in np.arange(0, numPoints, 1):
        line = (" ".join(dataList[listIndex].split())).split(delimiter)

        cand_dm.append(float(line[0]))
        cand_snr.append(float(line[1]))
        cand_time.append(float(line[2]))
        cand_sample.append(float(line[3]))
        cand_boxcarbinwidth.append(float(line[4]))
        cand_pol.append(line[5])

    readFile.close()

    return cand_dm, cand_snr, cand_time, cand_sample, cand_boxcarbinwidth, cand_pol


# RUN NOTES:
# Example: python get_dual_pol_data.py --obsroot 21m107 --fil_lcp M81R-21m061-m81r-slcp-0001_zapedge_DM87.770_extract_cand10.fil --fil_rcp M81R-21m061-m81r-srcp-0001_zapedge_DM87.770_extract_cand10.fil --sp_lcp lcp.singlepulse --sp_rcp rcp.singlepulse

@click.command()
@click.option("--obsroot", help="Root name of output directory (e.g., 21m107).", type=str)
@click.option("--fil_lcp", help="LCP filterbank data.", type=str)
@click.option("--fil_rcp", help="RCP filterbank data.", type=str)
@click.option("--sp_lcp", help="LCP single pulse list (PRESTO format).", type=str)
@click.option("--sp_rcp", help="RCP single pulse list (PRESTO format).", type=str)

def pipeline(obsroot, fil_lcp, fil_rcp, sp_lcp, sp_rcp):
    
    cwd = os.getcwd()
    os.chdir(cwd)
    
    call("rm -rf %s_stokesI" % obsroot, shell=True) 
    call("mkdir %s_stokesI" % obsroot, shell=True)
    
    # Dump the header information that I need.    
    writeFile = open("%s/%s_stokesI/header_data.txt" % (cwd, obsroot), "a")
    writeFile.write("LCP Filterbank:\n\n")
    writeFile.close()
    
    call("header %s >> %s/%s_stokesI/header_data.txt" % (fil_lcp, cwd, obsroot), shell=True)
    
    writeFile = open("%s/%s_stokesI/header_data.txt" % (cwd, obsroot), "a")
    writeFile.write("\n\nRCP Filterbank:\n\n")
    writeFile.close()
    
    call("header %s >> %s/%s_stokesI/header_data.txt" % (fil_rcp, cwd, obsroot), shell=True)
    
    writeFile = open("%s/%s_stokesI/header_data.txt" % (cwd, obsroot), "a")
    writeFile.write("\n\nLCP Filterbank:\n\n")
    
    inputHeader_LCP = readFilterbankHeader(fil_lcp)
    
    for key in inputHeader_LCP:
        
        if (key == "tsamp" or key == "foff" or key == "tstart" or key == "fch1"):
            
            writeFile.write("%s: %.20f\n" % (key, inputHeader_LCP[key]))
        
        else:
            
            writeFile.write("%s: %s\n" % (key, str(inputHeader_LCP[key])))
    
    writeFile.write("\n\nRCP Filterbank:\n\n")
    
    inputHeader_RCP = readFilterbankHeader(fil_rcp)
    
    for key in inputHeader_RCP:

        if (key == "tsamp" or key == "foff" or key == "tstart" or key == "fch1"):

            writeFile.write("%s: %.20f\n" % (key, inputHeader_RCP[key]))

        else:

            writeFile.write("%s: %s\n" % (key, str(inputHeader_RCP[key])))
    
    writeFile.close()
    
    
    
    # Read and merge the single pulse lists.
    cand_dm_lcp, cand_snr_lcp, cand_time_lcp, cand_sample_lcp, cand_boxcarbinwidth_lcp = read_sp_list(sp_lcp) 
    cand_dm_rcp, cand_snr_rcp, cand_time_rcp, cand_sample_rcp, cand_boxcarbinwidth_rcp = read_sp_list(sp_rcp)
    
    writeFile = open("%s/%s_stokesI/sp_list_merged.singlepulse" % (cwd, obsroot), "w")
    writeFile.write("# DM; Sigma; Time (s); Sample; Downfact; Pol\n")
    
    for i in np.arange(0, len(cand_time_lcp), 1):

        writeFile.write("%.2f; %.2f; %.6f; %i; %i; LCP\n" % (cand_dm_lcp[i], cand_snr_lcp[i], cand_time_lcp[i], cand_sample_lcp[i], cand_boxcarbinwidth_lcp[i]))
    
    for i in np.arange(0, len(cand_time_rcp), 1):

        writeFile.write("%.2f; %.2f; %.6f; %i; %i; RCP\n" % (cand_dm_rcp[i], cand_snr_rcp[i], cand_time_rcp[i], cand_sample_rcp[i], cand_boxcarbinwidth_rcp[i]))

    writeFile.close()
    
    
     
    merged_sp_fn = "%s/%s_stokesI/sp_list_merged.singlepulse" % (cwd, obsroot)
    cand_dm, cand_snr, cand_time, cand_sample, cand_boxcarbinwidth, cand_pol = read_merged_sp_list(merged_sp_fn)
    
    # For each candidate, extract 100 ms of data around the candidate from the filterbank data recorded in each pol.
    tsamp = 2.0e-6
    width_samples = 0.100 / tsamp
    
    for i in np.arange(0, len(cand_sample), 1):
        print("Extracting LCP/RCP Data from Candidate %i..." % (i+1))
        
        start_sample = cand_sample[i] - int(np.round(width_samples / 2.0))
        
        fb_cand_fn_root = "m81r_%s_extract_cand%i" % (obsroot, (i + 1))
        
        call("extract %s %i %i > %s/%s_stokesI/%s" % (fil_lcp, start_sample, width_samples, cwd, obsroot, fb_cand_fn_root + "_LCP.fil"), shell=True)
        call("extract %s %i %i > %s/%s_stokesI/%s" % (fil_rcp, start_sample, width_samples, cwd, obsroot, fb_cand_fn_root + "_RCP.fil"), shell=True)





if __name__ == "__main__":
    pipeline()
